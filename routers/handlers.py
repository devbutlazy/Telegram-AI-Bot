from langdetect import detect
import traceback
import logging
import requests

from aiogram import Router
from aiogram.filters import callback_data
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery

from gtts import gTTS

import g4f
import g4f.Provider
import g4f.providers

router = Router()
logger = logging.getLogger("aiogram")


class CustomCallback(callback_data.CallbackData, prefix="data"):
    data: str

@router.callback_query(CustomCallback.filter())
async def my_callback_foo(query: CallbackQuery, callback_data: CustomCallback):
    """
    Callback query handler for "/" prefixed commands.

    Params:
    - query: CallbackQuery - Telegram callback query
    """

    match callback_data.data:
        case "help":
            await query.message.edit_text(
                "üîß <b>–û—Å—å –º–æ—ó –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏</b>\n\n"
                "/answer - –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI\n"
                "/tts - –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—É–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç—É\n"
                "/image -  –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º DALLE (–ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ª–∏—à–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞)\n\n",
                parse_mode="html",
                reply_markup=(
                    InlineKeyboardBuilder()
                    .button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CustomCallback(data="back"))
                    .as_markup()
                ),
            )
        case "additional":
            await query.message.edit_text(
                "‚ôæÔ∏è <b>–¢—É—Ç –±—É–¥–µ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è...</b>\n\n",
                parse_mode="html",
                reply_markup=(
                    InlineKeyboardBuilder()
                    .button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CustomCallback(data="back"))
                    .as_markup()
                )
            )
        case "back":
            await query.message.edit_text(
                "üëã –•–∞–π. –Ø –Ω–µ–π—Ä–æ-–º–µ—Ä–µ–∂–∞ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º. –î—ñ–∑–Ω–∞–π—Ç–µ—Å—å –ø—Ä–æ –º–µ–Ω–µ –±—ñ–ª—å—à–µ, –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ.",
                reply_markup=(
                    InlineKeyboardBuilder()
                    .button(text="‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data=CustomCallback(data="help"))
                    .button(
                        text="üåê –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data=CustomCallback(data="additional")
                    )
                    .as_markup()
                ),
            )
        case _:
            await query.message.reply(
                f"<a href='https://shorturl.at/svIT4'>‚ùì</a> –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ –Ω–µ—ó –Ω–∞ —Ç–µ—Ö. –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ!\n"
            )
            logger.error(callback_data.data)


class ArtificialIntelligence:
    def __init__(self):
        self.response: str = ""

    def generate_response(self, prompt: str) -> str:
        """
        Generates a response to the given prompt using the GPT-4 model.
        """
        response = ""
        try:
            response = g4f.ChatCompletion.create(
                model=g4f.models.blackbox,
                messages=[{"role": "user", "content": prompt}],
                stream=True,
            )
            for message in response:
                self.response += message

            return self.response
        except BaseException:
            traceback.print_exc()
            return "Oops! Something went wrong. Please try again later."
        
    def text_to_speech(self, text: str) -> str:
        """
        Generates an audio message using the Google Text-to-Speech API.
        """
        try:
            lang = detect(text)
        except BaseException:
            lang = "en"

        voice = gTTS(text=text, lang=lang)
        file_in_bytes = b''.join([byte for byte in voice.stream()])
        return file_in_bytes
        
    def generate_image(self, prompt: str) -> str:
        """
        Generates an image using the DALL¬∑E model.
        """
        url = f'https://picsum.photos/800/600?grayscale&blur=2&random={prompt}'
        response = requests.get(url)
        
        if response.status_code == 200:
            image_url = response.url
            return image_url
        else:
            print(f"Failed to fetch image. Status code: {response.status_code}")
            return None

